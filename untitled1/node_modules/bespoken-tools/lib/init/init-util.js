"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InitUtil = void 0;
var fs = require("fs");
var skill_testing_ml_1 = require("skill-testing-ml");
var InitUtil = (function () {
    function InitUtil(type, platform, handler, locales, projectName, virtualDeviceToken, dialogFlow, testingExist, phoneNumber) {
        this.type = type;
        this.platform = platform;
        this.handler = handler;
        this.locales = locales;
        this.projectName = projectName;
        this.virtualDeviceToken = virtualDeviceToken;
        this.dialogFlow = dialogFlow;
        this.testingExist = testingExist;
        this.phoneNumber = phoneNumber;
        this.isMultilocale = locales.split(",").length > 1;
        this.projectName = projectName || "voice hello world";
        this.handler = handler || "index.js";
        this.locales = locales || "en-US";
        this.virtualDeviceToken = virtualDeviceToken || "[your virtual device token goes here]";
        this.dialogFlow = dialogFlow || "Path to your Dialogflow directory. Read more at https://read.bespoken.io/unit-testing/guide-google/#configuration";
        this.testingExist = testingExist;
        this.phoneNumber = phoneNumber;
    }
    InitUtil.prototype.createFiles = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.lastTestingJSONFilename = this.getTesTingJSONName();
                        return [4, this.createTestFilesForType(this.type, this.platform)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    InitUtil.isThereTestingJsonFile = function () {
        var currentFolder = process.cwd();
        return fs.existsSync("".concat(currentFolder, "/testing.json"));
    };
    InitUtil.prototype.getTesTingJSONName = function () {
        var path = process.cwd();
        var lastTestingJsonFile = "testing.json";
        if (fs.existsSync("".concat(path, "/").concat(lastTestingJsonFile)) && !this.testingExist) {
            var lastCreatedTime_1 = 0;
            fs.readdirSync(path).forEach(function (file) {
                var filePath = "".concat(path, "/").concat(file);
                var _file = fs.lstatSync(filePath);
                if (_file.isFile() && file.match(/testing.*\.json/)) {
                    var birthtimeMs = _file.birthtimeMs;
                    if (birthtimeMs > lastCreatedTime_1) {
                        lastCreatedTime_1 = birthtimeMs;
                        lastTestingJsonFile = file;
                    }
                }
            });
            var _a = lastTestingJsonFile.split("_"), afterDash = _a[1];
            if (!afterDash) {
                return "testing_01.json";
            }
            else {
                var _index = afterDash.split(".")[0];
                var index = parseInt(_index);
                var newIndex = index < 9 ? "0".concat(index + 1) : index + 1;
                return "testing_".concat(newIndex, ".json");
            }
        }
        return lastTestingJsonFile;
    };
    InitUtil.prototype.createTestFilesForType = function (type, platform) {
        return __awaiter(this, void 0, void 0, function () {
            var currentFolder, testFolder, ymlContent, testingFileContent, preExtension;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        currentFolder = process.cwd();
                        if (!fs.existsSync("".concat(currentFolder, "/test"))) {
                            fs.mkdirSync("".concat(currentFolder, "/test"));
                        }
                        testFolder = "".concat(currentFolder, "/test/").concat(type);
                        if (!fs.existsSync(testFolder)) {
                            fs.mkdirSync(testFolder);
                        }
                        return [4, this.createMultilocaleFiles(type)];
                    case 1:
                        _a.sent();
                        ymlContent = this.getYmlContent(type, platform);
                        testingFileContent = this.getTestingJson();
                        preExtension = type === "unit" ? "test" : "e2e";
                        return [4, this.writeFile("".concat(testFolder, "/index.").concat(preExtension, ".yml"), ymlContent)];
                    case 2:
                        _a.sent();
                        return [4, this.writeFile("".concat(currentFolder, "/").concat(this.lastTestingJSONFilename), JSON.stringify(testingFileContent, null, 4))];
                    case 3:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    InitUtil.prototype.getYmlContent = function (type, platform) {
        var parser = new skill_testing_ml_1.TestParser();
        var configuration = {
            description: this.getTestSuiteDescription(type),
        };
        var interactions = [this.getLaunchInteraction(type, platform)];
        if (platform !== "phone") {
            interactions.push(this.getHelpInteraction(type, platform));
        }
        var yamlObject = {
            configuration: configuration,
            "tests": [
                {
                    interactions: interactions,
                    "name": this.getTestName(),
                },
            ],
        };
        parser.loadYamlObject(yamlObject);
        var contents = parser.contents;
        if (type === "unit" && platform === "google") {
            contents = "".concat(contents).replace("- HelpIntent :", "- HelpIntent : #replace with the intent for help");
        }
        var comment = this.getHeaderComment(type);
        return "".concat(comment).concat(contents);
    };
    InitUtil.prototype.getTestSuiteDescription = function (type) {
        if (this.isMultilocale) {
            return "$testSuiteDescription";
        }
        if (type === "unit") {
            return "My first unit test suite";
        }
        else if (type === "e2e") {
            return "My first e2e test suite";
        }
        return "";
    };
    InitUtil.prototype.getTestName = function () {
        if (this.isMultilocale) {
            return "$firstTestName";
        }
        else if (this.platform === "phone") {
            return "Dial and ask for help";
        }
        else if (["whatsapp", "sms"].indexOf(this.platform) > -1) {
            return "Ask for help";
        }
        return "Launch and ask for help";
    };
    InitUtil.prototype.getLaunchInteraction = function (type, platform) {
        var expected = "";
        var input = "";
        if (this.isMultilocale) {
            input = "$INVOCATION_UTTERANCE";
            expected = "$launchPrompt";
        }
        else {
            if (type === "unit") {
                input = "LaunchRequest";
                expected = "Welcome to ".concat(this.projectName);
            }
            else if (type === "e2e") {
                if (platform === "phone") {
                    input = "$DIAL";
                    expected = "Welcome to ".concat(this.projectName);
                }
                else if (["sms", "whatsapp"].indexOf(platform) > -1) {
                    input = "hello";
                    expected = "Welcome to ".concat(this.projectName);
                }
                else {
                    input = "open ".concat(this.projectName);
                    expected = "Welcome to ".concat(this.projectName);
                }
            }
        }
        var expectedItems = [
            {
                "action": "prompt",
                "operator": ":",
                "value": expected,
            },
        ];
        if (platform === "phone") {
            expectedItems.push({
                "action": "set finishOnPhrase",
                "operator": ":",
                "value": "what can I help you with?",
            });
        }
        return {
            "expected": expectedItems,
            input: input,
        };
    };
    InitUtil.prototype.getHelpInteraction = function (type, platform) {
        var expectedPrompt = "helpPrompt";
        var input = "";
        if (this.isMultilocale) {
            if (type === "unit") {
                input = platform === "alexa" ? "AMAZON.HelpIntent" : "HelpIntent";
            }
            else if (type === "e2e") {
                input = "$HELP_UTTERANCE";
                expectedPrompt = "$helpPrompt";
            }
        }
        else {
            if (type === "unit") {
                input = platform === "alexa" ? "AMAZON.HelpIntent" : "HelpIntent";
            }
            else if (type === "e2e") {
                input = "help";
            }
            expectedPrompt = "What can I help you with";
        }
        return {
            "expected": [
                {
                    "action": "prompt",
                    "operator": ":",
                    "value": expectedPrompt,
                },
            ],
            input: input,
        };
    };
    InitUtil.prototype.getTestingJson = function () {
        var testingJsonForUnit = {
            handler: this.handler,
            locales: this.locales,
        };
        var testingJsonForE2e = __assign(__assign({ virtualDeviceToken: this.virtualDeviceToken }, testingJsonForUnit), { type: "e2e" });
        delete testingJsonForE2e.handler;
        if (this.platform === "google") {
            testingJsonForUnit["platform"] = "google";
            testingJsonForUnit["dialogFlow"] = this.dialogFlow;
        }
        else if (["phone", "sms", "whatsapp"].indexOf(this.platform) > -1) {
            testingJsonForE2e["platform"] = this.platform;
            testingJsonForE2e["phoneNumber"] = this.phoneNumber;
        }
        return this.type === "unit" ? testingJsonForUnit : testingJsonForE2e;
    };
    InitUtil.prototype.getHeaderComment = function (type) {
        var link = type === "e2e" ?
            "https://read.bespoken.io/end-to-end/getting-started/" :
            "https://read.bespoken.io/unit-testing/getting-started/";
        var multilocaleComment = "# This is the test file for your ".concat(type, " tests, feel free to copy and modify the template test\n# as many times as you want. In this same folder, you'll also find a testing.json\n# file. It contains global configurations for future test files you might create in the future.\n# You'll also find a folder called locales, it contains the localization files for all your supported\n# locales. Just put a value to each variable and they will be replaced here. Add, remove or modify\n# as necessary.\n#\n# Find more info on ").concat(link, "\n");
        var singlelocaleComment = "# This is the test file for your ".concat(type, " tests, feel free to copy and modify the template test\n# as many times as you want. In this same folder, you'll also find a testing.json\n# file. It contains global configurations for future test files you might create in the future.\n#\n# Find more info on ").concat(link, "\n");
        return this.isMultilocale ? multilocaleComment : singlelocaleComment;
    };
    InitUtil.prototype.createMultilocaleFiles = function (type) {
        return __awaiter(this, void 0, void 0, function () {
            var currentFolder, localizedValues;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isMultilocale) {
                            return [2];
                        }
                        currentFolder = process.cwd();
                        if (!fs.existsSync("".concat(currentFolder, "/test/").concat(type, "/locales"))) {
                            fs.mkdirSync("".concat(currentFolder, "/test/").concat(type, "/locales"));
                        }
                        localizedValues = this.getLocalizedProperties();
                        return [4, Promise.all(this.locales.split(",").filter(function (x) { return x; }).map(function (locale) {
                                locale = locale.trim();
                                var enOnlyComment = locale === "en-US" ? " for en-US" : "";
                                var comment = "# This is the localization file".concat(enOnlyComment, ". Please, modify the values so that they align\n# with your voice app responses for this locale\n\n");
                                var localizedFileContent = "";
                                if (locale === "en-US") {
                                    localizedFileContent = Object.keys(localizedValues)
                                        .map(function (key) { return "".concat(key, ": ").concat(localizedValues[key]); })
                                        .join("\n");
                                }
                                else {
                                    localizedFileContent = Object.keys(localizedValues)
                                        .map(function (key) { return "".concat(key, ":"); })
                                        .join("\n");
                                }
                                localizedFileContent = "".concat(comment).concat(localizedFileContent);
                                return _this.writeFile("".concat(currentFolder, "/test/").concat(type, "/locales/").concat(locale, ".yml"), localizedFileContent);
                            }))];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    InitUtil.prototype.getLocalizedProperties = function () {
        if (this.isMultilocale && this.type === "e2e") {
            return {
                $testSuiteDescription: "My first unit test suite",
                $firstTestName: "Launch and ask for help",
                $launchPrompt: "okay here's",
                $helpPrompt: "What can I help you with?",
                $INVOCATION_UTTERANCE: "Open ".concat(this.projectName, " overview"),
                $HELP_UTTERANCE: "help"
            };
        }
        return {
            testSuiteDescription: "My first unit test suite",
            firstTestName: "Launch and ask for help",
            launchPrompt: "Welcome to ".concat(this.projectName),
            helpPrompt: "What can I help you with?",
            helpCardContent: "What can I help you with?",
            helpCardTitle: this.projectName,
        };
    };
    InitUtil.prototype.writeFile = function (path, toWrite) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, new Promise(function (resolve, reject) {
                        fs.writeFile(path, toWrite, function (err) {
                            if (err) {
                                reject(err);
                                return;
                            }
                            resolve();
                        });
                    })];
            });
        });
    };
    return InitUtil;
}());
exports.InitUtil = InitUtil;
//# sourceMappingURL=init-util.js.map