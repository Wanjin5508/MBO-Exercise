function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * Class to store and calculate elapsed time between two execution.
 */
module.exports = /*#__PURE__*/function () {
  function StopWatch() {
    _classCallCheck(this, StopWatch);

    this._end = null;
    this._start = null;
  }
  /**
   * Reset the start timestamp to now.
   */


  _createClass(StopWatch, [{
    key: "resetAndStart",
    value: function resetAndStart() {
      this._start = new Date();
      this._end = null;
    }
    /**
     * Update the value of end timestamp
     */

  }, {
    key: "stop",
    value: function stop() {
      this._end = new Date();
    }
  }, {
    key: "elapsedTime",
    get: function () {
      try {
        return this._end.getTime() - this._start.getTime();
      } catch (ex) {
        return -1;
      }
    }
    /**
     * Converts information into a Dto  
     * @returns object with the information of the start timestamp, end timestamp and elapsed time in milliseconds
     */

  }, {
    key: "toDto",
    value: function toDto() {
      var start = new Date(this._start);
      var end = new Date(this._end);
      var elapsedTime = this.elapsedTime;
      return {
        elapsedTime,
        end,
        start
      };
    }
  }]);

  return StopWatch;
}();