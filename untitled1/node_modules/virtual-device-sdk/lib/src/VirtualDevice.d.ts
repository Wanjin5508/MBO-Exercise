export interface IVirtualDeviceConfiguration {
    token: string;
    locale?: string;
    voiceID?: string;
    skipSTT?: boolean;
    asyncMode?: boolean;
    stt?: string;
    locationLat?: string;
    locationLong?: string;
    conversationId?: string;
    screenMode?: string;
    client?: string;
    projectId?: string;
    phoneNumber?: string;
    [key: string]: any;
}
export declare class VirtualDevice {
    arg0: string | IVirtualDeviceConfiguration;
    locale?: string | undefined;
    voiceID?: string | undefined;
    skipSTT?: boolean | undefined;
    asyncMode?: boolean | undefined;
    stt?: string | undefined;
    locationLat?: string | undefined;
    locationLong?: string | undefined;
    conversationId?: string | undefined;
    screenMode?: string | undefined;
    client?: string | undefined;
    projectId?: string | undefined;
    baseURL: string;
    homophones: {
        [id: string]: string[];
    };
    configuration: IVirtualDeviceConfiguration;
    private filters;
    private proxy?;
    private agent?;
    private TIMEOUTMS;
    private MIN_RETRY_TIMEOUTMS;
    private MAX_RETRY_TIMEOUTMS;
    constructor(arg0: string | IVirtualDeviceConfiguration, locale?: string | undefined, voiceID?: string | undefined, skipSTT?: boolean | undefined, asyncMode?: boolean | undefined, stt?: string | undefined, locationLat?: string | undefined, locationLong?: string | undefined, conversationId?: string | undefined, screenMode?: string | undefined, client?: string | undefined, projectId?: string | undefined);
    addHomophones(word: string, homophones: string[]): void;
    httpInterface(url: any): any;
    httpInterfacePort(url: any): any;
    addFilter(filter: (data: any) => void): void;
    clearFilters(): void;
    message(message: string, debug?: boolean, phrases?: string[], newConversation?: boolean): Promise<IVirtualDeviceResult>;
    batchMessage(messages: IMessage[], debug?: boolean): Promise<IVirtualDeviceResult[] | any>;
    getConversationResults(uuid: string): Promise<IVirtualDeviceResponse | any>;
    stopConversation(uuid: string): Promise<IVirtualDeviceResult[] | any>;
    waitForSessionToEnd(): Promise<unknown>;
    private handleBatchResponse;
    private handleAsynchResponse;
    private applyHomophones;
    private processMessages;
}
export interface IConversationResult {
    conversation_id: string;
}
export interface IVirtualDeviceResponse {
    results: IVirtualDeviceResult[];
    status: string;
    error: string;
    errorCode: number;
}
export interface IVirtualDeviceResult {
    card: ICard | null;
    debug: {
        rawTranscript?: string;
        rawJSON?: any;
    };
    sessionTimeout: number;
    streamURL: string | null;
    transcript: string | null;
    message: string;
    status?: string | null;
}
export interface IVirtualDeviceError {
    error: string;
    error_category?: string;
}
export interface ICard {
    imageURL: string | null;
    mainTitle: string | null;
    subTitle: string | null;
    textField: string | null;
    type: string;
}
export interface IMessage {
    text?: string;
    phrases?: string[];
    url?: string;
    audio?: IAudio;
    settings?: {
        [id: string]: any;
    };
}
export interface IAudio {
    audioURL?: string;
    audioPath?: string;
    frameRate?: number;
    channels?: number;
    sampleWidth?: number;
}
