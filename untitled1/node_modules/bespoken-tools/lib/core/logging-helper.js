"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggingHelper = void 0;
var winston = require("winston");
var winston_1 = require("winston");
var string_util_1 = require("./string-util");
var LoggingHelper = (function () {
    function LoggingHelper() {
    }
    LoggingHelper.setVerbose = function (enableVerbose) {
        LoggingHelper.verboseEnabled = enableVerbose;
        if (LoggingHelper.verboseEnabled) {
            LoggingHelper.logger.level = "verbose";
        }
        else {
            LoggingHelper.logger.level = "info";
        }
    };
    LoggingHelper.debug = function (logger, message) {
        LoggingHelper.log("debug", logger, message);
    };
    LoggingHelper.verbose = function (logger, message) {
        LoggingHelper.log("verbose", logger, message);
    };
    LoggingHelper.info = function (logger, message) {
        LoggingHelper.log("info", logger, message);
    };
    LoggingHelper.warn = function (logger, message) {
        LoggingHelper.log("warn", logger, message);
    };
    LoggingHelper.error = function (logger, message, callback) {
        LoggingHelper.log("error", logger, message, callback);
    };
    LoggingHelper.log = function (level, logger, message, callback) {
        if (!LoggingHelper.logger)
            return;
        if (LoggingHelper.cli) {
            LoggingHelper.logger.log(level, message, callback);
        }
        else {
            var loggerString = string_util_1.StringUtil.rpad(logger, " ", 10).substr(0, 10);
            LoggingHelper.logger.log(level, loggerString + "  " + message, callback);
        }
    };
    LoggingHelper.prepareForFileLoggingAndDisableConsole = function (file) {
        LoggingHelper.logger.add(new winston.transports.File({
            format: LoggingHelper.cli ? LoggingHelper.cliFormatter : LoggingHelper.formatter,
            level: "error",
            filename: file,
        }));
        LoggingHelper.logger.remove(winston.transports.Console);
    };
    LoggingHelper.initialize = function (cli) {
        LoggingHelper.cli = cli;
        winston.clear();
        if (LoggingHelper.cli) {
            LoggingHelper.logger = winston.createLogger({
                format: LoggingHelper.cliFormatter,
                level: "info",
                transports: [new winston.transports.Console()],
            });
        }
        else {
            LoggingHelper.logger = winston.createLogger({
                format: LoggingHelper.formatter,
                level: "warn",
                transports: [new winston.transports.Console()],
            });
        }
    };
    LoggingHelper.cli = false;
    LoggingHelper.verboseEnabled = false;
    LoggingHelper.logger = null;
    LoggingHelper.REQUEST_COLOR = "#FF6633";
    LoggingHelper.LINK_COLOR = "#FF6633";
    LoggingHelper.formatter = winston_1.format.printf(function (_a) {
        var level = _a.level, message = _a.message, label = _a.label, timestamp = _a.timestamp, meta = _a.meta;
        return new Date().toISOString() + " "
            + level.toUpperCase() + " "
            + (undefined !== message ? message : "")
            + (meta && Object.keys(meta).length ? "\n\t"
                + JSON.stringify(meta) : "");
    });
    LoggingHelper.cliFormatter = winston_1.format.printf(function (_a) {
        var level = _a.level, message = _a.message, label = _a.label, timestamp = _a.timestamp, meta = _a.meta;
        var levelFormatted = level.toUpperCase();
        if (levelFormatted === "VERBOSE") {
            levelFormatted = "VERB";
        }
        return string_util_1.StringUtil.rpad(levelFormatted, " ", 5) + " "
            + new Date().toISOString() + " "
            + (undefined !== message ? message : "")
            + (meta && Object.keys(meta).length ? "\n\t"
                + JSON.stringify(meta) : "");
    });
    return LoggingHelper;
}());
exports.LoggingHelper = LoggingHelper;
//# sourceMappingURL=logging-helper.js.map