function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _ = require("lodash");

var Invoker = require("./Invoker").Invoker;

var InvokerResponse = require("./Invoker").InvokerResponse;

var Util = require("../util/Util");

var VirtualGoogleAssistant = require("virtual-google-assistant").VirtualGoogleAssistant;

module.exports = /*#__PURE__*/function (_Invoker) {
  _inherits(VirtualGoogleAssistantInvoker, _Invoker);

  var _super = _createSuper(VirtualGoogleAssistantInvoker);

  function VirtualGoogleAssistantInvoker(runner) {
    _classCallCheck(this, VirtualGoogleAssistantInvoker);

    return _super.call(this, runner);
  }

  _createClass(VirtualGoogleAssistantInvoker, [{
    key: "before",
    value: function before(testSuite) {
      var builder = VirtualGoogleAssistant.Builder().directory(testSuite.dialogFlowDirectory);

      if (testSuite.expressModule) {
        this._virtualGoogleAssistant = builder.expressModule(testSuite.expressModule, testSuite.expressPort).create();
      } else if (testSuite.actionURL) {
        this._virtualGoogleAssistant = builder.actionUrl(testSuite.actionURL).create();
      } else {
        this._virtualGoogleAssistant = builder.handler(testSuite.handler).create();
      }
    }
  }, {
    key: "beforeTest",
    value: function () {
      var _beforeTest = _asyncToGenerator(function* () {
        try {
          yield this._virtualGoogleAssistant.startExpressServer();
        } catch (e) {
          if (e !== "This instance is not using express" && e.message !== "This instance is not using express") {
            throw e;
          }
        }
      });

      function beforeTest() {
        return _beforeTest.apply(this, arguments);
      }

      return beforeTest;
    }()
  }, {
    key: "afterTest",
    value: function () {
      var _afterTest = _asyncToGenerator(function* () {
        this._virtualGoogleAssistant.resetContext();

        this._virtualGoogleAssistant.resetFilters();

        try {
          yield this._virtualGoogleAssistant.stopExpressServer();
        } catch (e) {
          if (e !== "This instance is not using express" && e.message !== "This instance is not using express") {
            throw e;
          }
        }
      });

      function afterTest() {
        return _afterTest.apply(this, arguments);
      }

      return afterTest;
    }()
  }, {
    key: "invoke",
    value: function () {
      var _invoke = _asyncToGenerator(function* (interaction) {
        var _this = this;

        // We always use a filter to apply expressions
        this._virtualGoogleAssistant.addFilter( /*#__PURE__*/function () {
          var _ref = _asyncToGenerator(function* (request) {
            yield _this._runner.filterRequest(interaction, request);
          });

          return function (_x2) {
            return _ref.apply(this, arguments);
          };
        }());

        var response;

        if (interaction.utterance === "LaunchRequest") {
          response = yield this._virtualGoogleAssistant.launch();
        } else {
          if (interaction.intent) {
            response = yield this._virtualGoogleAssistant.intend(interaction.intent, interaction.slots);
          } else {
            var intent = Util.returnIntentObjectFromUtteranceIfValid(interaction.utterance);

            if (intent) {
              try {
                interaction.intent = intent.name;
                interaction.slots = intent.slots;
                response = yield this._virtualGoogleAssistant.intend(interaction.intent, interaction.slots);
              } catch (error) {
                if (error.message && error.message.includes("Interaction model has no intentName named")) {
                  response = yield this._virtualGoogleAssistant.utter(interaction.utterance);
                }
              }
            } else {
              response = yield this._virtualGoogleAssistant.utter(interaction.utterance);
            }
          }
        }

        return new VirtualGoogleAssistantResponse(interaction, response);
      });

      function invoke(_x) {
        return _invoke.apply(this, arguments);
      }

      return invoke;
    }()
  }]);

  return VirtualGoogleAssistantInvoker;
}(Invoker);

var VirtualGoogleAssistantResponse = /*#__PURE__*/function (_InvokerResponse) {
  _inherits(VirtualGoogleAssistantResponse, _InvokerResponse);

  var _super2 = _createSuper(VirtualGoogleAssistantResponse);

  function VirtualGoogleAssistantResponse(interaction, sourceJSON) {
    _classCallCheck(this, VirtualGoogleAssistantResponse);

    return _super2.call(this, interaction, sourceJSON);
  }

  _createClass(VirtualGoogleAssistantResponse, [{
    key: "cardContent",
    value: function cardContent() {
      return this.json.displayText;
    }
  }, {
    key: "cardImageURL",
    value: function cardImageURL() {
      undefined;
    }
  }, {
    key: "cardTitle",
    value: function cardTitle() {
      return this.json.speech;
    }
  }, {
    key: "prompt",
    value: function prompt() {
      var richResponse = _.get(this.json, "data.google.richResponse.items[0].simpleResponse.textToSpeech");

      var expressRichResponse = _.get(this.json, "payload.google.richResponse.items[0].simpleResponse.textToSpeech");

      var SSMLResponse = _.get(this.json, "data.google.richResponse.items[0].simpleResponse.ssml");

      var expressSSMLResponse = _.get(this.json, "data.google.richResponse.items[0].simpleResponse.ssml");

      return SSMLResponse || expressSSMLResponse || expressRichResponse || richResponse || this.json.speech;
    }
  }, {
    key: "reprompt",
    value: function reprompt() {
      return undefined;
    }
  }, {
    key: "supported",
    value: function supported(jsonPath) {
      var ignorePropertiesRaw = _.get(this._interaction, "test.testSuite.ignoreProperties");

      var testType = _.get(ignorePropertiesRaw, "google.type");

      var ignoredProperties = [];

      if (testType == "unit") {
        var paths = _.get(ignorePropertiesRaw, "google.paths");

        if (paths && paths.length) ignoredProperties = paths.split(",").map(x => x.trim());
      }

      ignoredProperties.push("card.type");

      if (ignoredProperties.includes(jsonPath)) {
        return false;
      }

      return true;
    }
  }, {
    key: "sessionEnded",
    value: function sessionEnded() {
      var richResponse = _.get(this.json, "data.google.expectUserResponse");

      return !(richResponse || this.json.expectUserResponse);
    }
  }]);

  return VirtualGoogleAssistantResponse;
}(InvokerResponse);