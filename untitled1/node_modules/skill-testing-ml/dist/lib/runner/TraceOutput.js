function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var fs = require("fs");

var path = require("path");

var Util = require("../util/Util");

var {
  camelCase,
  padStart,
  upperFirst
} = require("lodash");

var createDirectoriesForFile = fileName => {
  var traceOutputFolder = path.dirname(fileName);

  if (!fs.existsSync(traceOutputFolder)) {
    fs.mkdirSync(traceOutputFolder, {
      recursive: true
    });
  }
};

var shortName = longName => longName.split(/[^a-z0-9]/ig).filter(p => p).map(p => p.substring(0, 5)).map(p => upperFirst(camelCase(p))).reduce((p, c) => p.length <= 200 ? p.concat(c) : p, "");

var formatTwoDigits = number => padStart(number, 2, "0");

var TraceOutputWriter = /*#__PURE__*/function () {
  function TraceOutputWriter() {
    _classCallCheck(this, TraceOutputWriter);
  }

  _createClass(TraceOutputWriter, [{
    key: "isEnabled",
    value: function isEnabled({
      traceOutput = false
    }) {
      return traceOutput;
    }
  }, {
    key: "writeTraceForProcessResponse",
    value: function writeTraceForProcessResponse({
      response = {},
      testSuite = {}
    }) {
      try {
        var {
          interaction: {
            utterance: utteranceText,
            test: {
              description: testName,
              interactions: allInteractions
            }
          }
        } = response;
        var {
          description: testSuiteDescription,
          runTimestamp: timestamp
        } = testSuite;
        var utteranceOrder = allInteractions.findIndex(({
          utterance
        }) => utterance === utteranceText);
        var suite = testSuiteDescription || path.parse(testSuite.fileName).name;
        var requestPath = testSuite.resolvePath(`./test_output/trace_output/${Util.formatTimeStamp(timestamp)}` + `/${shortName(suite)}` + `/${shortName(testName)}` + `/${formatTwoDigits(utteranceOrder)}-${shortName(utteranceText)}-res.json`);
        createDirectoriesForFile(requestPath);
        fs.writeFileSync(requestPath, JSON.stringify(response.json, null, 2) || "");
      } catch (error) {
        // eslint-disable-next-line no-console
        console.warn("There was an error saving traceOutput file for response", {
          error
        });
      }
    }
  }, {
    key: "writeTraceForRequestPayload",
    value: function writeTraceForRequestPayload({
      testSuite = {},
      interaction = {},
      request = {}
    }) {
      try {
        var {
          description: testSuiteDescription,
          runTimestamp: timestamp
        } = testSuite;
        var {
          test: {
            description: testName
          }
        } = interaction;
        var suite = testSuiteDescription || path.parse(testSuite.fileName).name;
        var responsePath = testSuite.resolvePath(`./test_output/trace_output/${Util.formatTimeStamp(timestamp)}` + `/${shortName(suite)}` + `/${shortName(testName)}/req.json`);
        createDirectoriesForFile(responsePath);
        fs.writeFileSync(responsePath, JSON.stringify(request, null, 2) || "");
      } catch (error) {
        // eslint-disable-next-line no-console
        console.warn("There was an error saving traceOutput file for request information", {
          error
        });
      }
    }
  }]);

  return TraceOutputWriter;
}();

module.exports = {
  traceOutput: new TraceOutputWriter()
};