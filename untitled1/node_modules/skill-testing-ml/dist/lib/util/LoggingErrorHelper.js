function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var winston = require("winston");

var {
  combine,
  printf,
  timestamp
} = winston.format;

var LoggingErrorHelper = /*#__PURE__*/function () {
  function LoggingErrorHelper() {
    _classCallCheck(this, LoggingErrorHelper);
  }

  _createClass(LoggingErrorHelper, null, [{
    key: "error",
    value: function error(logger, message) {
      LoggingErrorHelper.log("error", logger, message);
    }
  }, {
    key: "initialize",
    value: function initialize(file) {
      var logFile = file || "bst-debug.log";
      var format = printf(({
        level,
        message,
        timestamp
      }) => {
        return `${timestamp} ${level}: ${message}`;
      });
      winston.clear();
      LoggingErrorHelper.logger = winston.createLogger({
        format: combine(timestamp(), format),
        level: "info",
        transports: [new winston.transports.File({
          filename: logFile,
          level: "info"
        })]
      });
    }
  }, {
    key: "log",
    value: function log(level, logger, message) {
      if (!LoggingErrorHelper.logger) {
        LoggingErrorHelper.initialize();
      } // right pad and then truncate the logger name leaving a tab


      var loggerString = logger + "              ".substr(0, 10);
      LoggingErrorHelper.logger.log(level, loggerString + "  " + message);
    }
  }]);

  return LoggingErrorHelper;
}();

module.exports = LoggingErrorHelper;