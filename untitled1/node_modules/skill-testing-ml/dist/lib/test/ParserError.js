function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var Util = require("../util/Util");
/**
 * Represents a error while parsing an interaction
 */


var ParserError = /*#__PURE__*/function () {
  function ParserError() {
    _classCallCheck(this, ParserError);
  }

  _createClass(ParserError, null, [{
    key: "interactionError",
    value:
    /**
     *
     * @param {TestInteraction} interaction - the interaction that generated the error
     * @param {string} message - the error message that we will show
     * @param {number} line - which line have the error
     * @return {ParserError}
     */
    function interactionError(interaction, message, line) {
      var file = interaction.test.testSuite.fileName;
      var error = ParserError.error(file, message, line);
      error.test = interaction ? interaction.test : undefined;
      error.interaction = interaction;
      return error;
    }
    /**
     * Creates a new Error object
     * @param {string} file - the file where the error has occurred
     * @param {string} message - Error message for the user
     * @param {number} line - in which line the error has occurred
     * @return {Error}
     */

  }, {
    key: "globalError",
    value: function globalError(file, message, line) {
      return ParserError.error(file, message, line);
    }
    /**
     * Creates a new Error object
     * @param {string} file - the file where the error has occurred
     * @param {string} message - Error message for the user
     * @param {number} line - in which line the error has occurred
     * @return {Error}
     */

  }, {
    key: "error",
    value: function error(file, message, line) {
      var errorType = "Test Syntax Error";
      var fullMessage = errorType + ":\n\t";
      fullMessage += message;
      fullMessage = Util.errorMessageWithLine(fullMessage, file, line);
      var error = new Error(fullMessage);
      error.name = errorType;
      error.handled = true;
      error.line = line;
      return error;
    }
  }]);

  return ParserError;
}();

module.exports = ParserError;