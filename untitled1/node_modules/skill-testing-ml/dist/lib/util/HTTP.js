function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var http = require("http");

var https = require("https");

var HttpsProxyAgent = require("https-proxy-agent");

module.exports = /*#__PURE__*/function () {
  function HTTP() {
    _classCallCheck(this, HTTP);
  }

  _createClass(HTTP, null, [{
    key: "get",
    value: function () {
      var _get = _asyncToGenerator(function* (options) {
        return new Promise((resolve, reject) => {
          var request = HTTP.request(options, resolve, reject);
          request.end();
        });
      });

      function get(_x) {
        return _get.apply(this, arguments);
      }

      return get;
    }()
  }, {
    key: "post",
    value: function () {
      var _post = _asyncToGenerator(function* (postOptions, body) {
        return new Promise((resolve, reject) => {
          // Set up the request
          var request = HTTP.request(postOptions, resolve, reject); // post the data

          var bodyString = JSON.stringify(body);
          request.write(bodyString);
          request.end();
        });
      });

      function post(_x2, _x3) {
        return _post.apply(this, arguments);
      }

      return post;
    }()
  }, {
    key: "request",
    value: function request(options, resolve, reject) {
      var httpModule = https;

      if (options.protocol === "http:") {
        httpModule = http;
      }

      var proxy = process.env.HTTPS_PROXY;

      if (proxy) {
        options.agent = new HttpsProxyAgent(proxy);
      }

      var request = httpModule.request(options, response => {
        var responseBody = "";
        response.setEncoding("utf8");
        response.on("data", chunk => {
          responseBody += chunk;
        });
        response.on("end", () => {
          var responseJSON;

          try {
            responseJSON = JSON.parse(responseBody);
          } catch (e) {// Do not worry if we cannot parse response body - just continue
          }

          resolve({
            body: responseBody,
            json: responseJSON,
            message: response
          });
        });
      });
      request.on("error", e => {
        reject(e);
      });
      return request;
    }
  }]);

  return HTTP;
}();