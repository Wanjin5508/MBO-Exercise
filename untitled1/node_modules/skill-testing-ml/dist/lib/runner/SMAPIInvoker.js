function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _ = require("lodash");

var FrameworkError = require("../util/FrameworkError");

var invoker = require("./Invoker");

var SMAPI = require("../util/SMAPI");

var SmapiError = require("../util/SmapiError");

module.exports = /*#__PURE__*/function (_invoker$Invoker) {
  _inherits(SMAPIInvoker, _invoker$Invoker);

  var _super = _createSuper(SMAPIInvoker);

  function SMAPIInvoker() {
    _classCallCheck(this, SMAPIInvoker);

    return _super.apply(this, arguments);
  }

  _createClass(SMAPIInvoker, [{
    key: "before",
    value: function () {
      var _before = _asyncToGenerator(function* (testSuite) {
        var skillId = testSuite.skillId;

        if (!skillId) {
          // Try getting the skill ID from the project .ask/config file
          skillId = SMAPI.fetchSkillIdFromConfig();
        }

        if (!skillId) {
          throw new FrameworkError("To use SMAPI, skillId must be specified in one of the following:\n" + "1) testing.json\n" + "2) configuration element\n" + "3) .ask/config file for the project");
        }

        var stage = testSuite.stage;

        if (!stage) {
          throw new FrameworkError("To use SMAPI, stage must be set to either \"development\" or \"live\" and specified in one of the following:\n" + "1) testing.json\n" + "2) configuration element");
        } else if (["live", "development"].indexOf(stage) === -1) {
          throw new FrameworkError("Invalid value for stage - must be either \"development\" or \"live\"");
        } // We need a SMAPI access token. First we prefer to get it using our virtual device token
        // If that does not work, we try the ASK config file


        var accessToken;
        var fromCLI = false; // Commented out for now, as these tokens do not work
        // if (testSuite.virtualDeviceToken) {
        //     accessToken = await SMAPI.fetchAccessTokenFromServer(testSuite.virtualDeviceToken);
        // }

        if (!accessToken) {
          accessToken = SMAPI.fetchAccessTokenFromConfig();
          fromCLI = true;
        }

        if (!accessToken) {
          throw new FrameworkError("To use SMAPI Simulate, you must configure ASK CLI on the machine.\n" + "The default profile will be used unless ASK_DEFAULT_PROFILE environment variable is set");
        }

        this.smapi = new SMAPI(accessToken, skillId, stage, testSuite.locale, fromCLI);
      });

      function before(_x) {
        return _before.apply(this, arguments);
      }

      return before;
    }()
  }, {
    key: "beforeTest",
    value: function beforeTest() {
      // Reset first interaction variable before each test
      this.firstInteraction = true;
    }
  }, {
    key: "invokeBatch",
    value: function () {
      var _invokeBatch = _asyncToGenerator(function* (interactions) {
        var responses = [];

        for (var interaction of interactions) {
          var response = yield this.invoke(interaction);
          responses.push(response);
        }

        return responses;
      });

      function invokeBatch(_x2) {
        return _invokeBatch.apply(this, arguments);
      }

      return invokeBatch;
    }()
  }, {
    key: "invoke",
    value: function () {
      var _invoke = _asyncToGenerator(function* (interaction) {
        var newSession = this.firstInteraction;
        var result = yield this.smapi.simulate(interaction.utterance, newSession);
        this.firstInteraction = false;
        return new SMAPIInvokerResponse(interaction, result);
      });

      function invoke(_x3) {
        return _invoke.apply(this, arguments);
      }

      return invoke;
    }()
  }]);

  return SMAPIInvoker;
}(invoker.Invoker);

var SMAPIInvokerResponse = /*#__PURE__*/function (_invoker$InvokerRespo) {
  _inherits(SMAPIInvokerResponse, _invoker$InvokerRespo);

  var _super2 = _createSuper(SMAPIInvokerResponse);

  function SMAPIInvokerResponse(interaction, sourceJSON) {
    _classCallCheck(this, SMAPIInvokerResponse);

    // We move the JSON around a bit
    if (sourceJSON.status === "FAILED") {
      throw new SmapiError("SMAPI Simulation Error: " + sourceJSON.result.error.message);
    }

    var skillResponse = sourceJSON.result.skillExecutionInfo.invocations[0].invocationResponse.body; // Delete the body element so we do not end up with a circular reference

    delete sourceJSON.result.skillExecutionInfo.invocations[0].invocationResponse.body; // Move the root response onto the raw element, for access to other pieces if needed

    skillResponse.raw = sourceJSON;
    return _super2.call(this, interaction, skillResponse);
  }

  _createClass(SMAPIInvokerResponse, [{
    key: "cardContent",
    value: function cardContent() {
      return _.get(this.json, "response.card.content");
    }
  }, {
    key: "cardImageURL",
    value: function cardImageURL() {
      return _.get(this.json, "response.card.image.largeImageUrl");
    }
  }, {
    key: "cardTitle",
    value: function cardTitle() {
      return _.get(this.json, "response.card.title");
    }
  }, {
    key: "prompt",
    value: function prompt() {
      return _.get(this.json, "response.outputSpeech.ssml", _.get(this.json, "response.outputSpeech.text"));
    }
  }, {
    key: "reprompt",
    value: function reprompt() {
      return _.get(this.json, "response.reprompt.outputSpeech.ssml", _.get(this.json, "response.reprompt.outputSpeech.text"));
    }
  }, {
    key: "sessionEnded",
    value: function sessionEnded() {
      return _.get(this.json, "response.shouldEndSession");
    }
  }, {
    key: "supported",
    value: function supported() {
      return true;
    }
  }]);

  return SMAPIInvokerResponse;
}(invoker.InvokerResponse);