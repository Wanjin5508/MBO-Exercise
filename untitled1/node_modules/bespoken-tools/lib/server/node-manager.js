"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeManager = void 0;
var net = require("net");
var node_1 = require("./node");
var socket_handler_1 = require("../core/socket-handler");
var global_1 = require("../core/global");
var logging_helper_1 = require("../core/logging-helper");
var bst_statistics_1 = require("../statistics/bst-statistics");
var Logger = "NODEMGR";
var NodeManager = (function () {
    function NodeManager(ports) {
        this.ports = ports;
        this.host = "0.0.0.0";
        this.nodes = {};
        this.onConnect = null;
        this.onNodeRemoved = null;
    }
    NodeManager.prototype.node = function (nodeID) {
        return this.nodes[nodeID];
    };
    NodeManager.prototype.start = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, port, server;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.servers = [];
                        _i = 0, _a = this.ports;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3, 4];
                        port = _a[_i];
                        server = new NodeServer(this, port);
                        return [4, server.start()];
                    case 2:
                        _b.sent();
                        this.servers.push(server);
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    NodeManager.onKeepAliveReceived = function (node) {
        node.socketHandler.send(new socket_handler_1.SocketMessage(global_1.Global.KeepAliveMessage));
    };
    NodeManager.prototype.stop = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, key, node, _b, _c, server;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        for (_i = 0, _a = Object.keys(this.nodes); _i < _a.length; _i++) {
                            key = _a[_i];
                            node = this.node(key);
                            node.socketHandler.disconnect();
                            logging_helper_1.LoggingHelper.info(Logger, "NODE CLOSING: " + node.id);
                        }
                        _b = 0, _c = this.servers;
                        _d.label = 1;
                    case 1:
                        if (!(_b < _c.length)) return [3, 4];
                        server = _c[_b];
                        return [4, server.stop()];
                    case 2:
                        _d.sent();
                        _d.label = 3;
                    case 3:
                        _b++;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    return NodeManager;
}());
exports.NodeManager = NodeManager;
var NodeServer = (function () {
    function NodeServer(nodeManager, port) {
        this.nodeManager = nodeManager;
        this.port = port;
    }
    NodeServer.prototype.start = function () {
        var _this = this;
        this.server = net.createServer(function (socket) {
            var initialConnection = true;
            var node = null;
            var socketHandler = new socket_handler_1.SocketHandler(socket, function (socketMessage) {
                var strMessage = socketMessage.asString();
                if (initialConnection) {
                    if (!socketMessage.isJSON()) {
                        logging_helper_1.LoggingHelper.error(Logger, "Error on parsing initial message: " + strMessage);
                        socketHandler.disconnect();
                        return;
                    }
                    var connectData = socketMessage.asJSON();
                    node = new node_1.Node(connectData.id, socketHandler);
                    _this.nodeManager.nodes[node.id] = node;
                    socketHandler.send(new socket_handler_1.SocketMessage("ACK"));
                    initialConnection = false;
                    if (_this.nodeManager.onConnect != null) {
                        _this.nodeManager.onConnect(node);
                    }
                    bst_statistics_1.BstStatistics.instance().record(bst_statistics_1.BstCommand.proxy, bst_statistics_1.BstEvent.connect, node.id);
                }
                else if (strMessage === global_1.Global.KeepAliveMessage) {
                    NodeManager.onKeepAliveReceived(node);
                }
                else if (node.handlingRequest()) {
                    node.onReply(socketMessage);
                }
            });
            socketHandler.onCloseCallback = function () {
                if (node !== null) {
                    logging_helper_1.LoggingHelper.info(Logger, "NODE CLOSED: " + node.id);
                    delete _this.nodeManager.nodes[node.id];
                    if (_this.nodeManager.onNodeRemoved !== undefined && _this.nodeManager.onNodeRemoved !== null) {
                        _this.nodeManager.onNodeRemoved(node);
                    }
                }
            };
            logging_helper_1.LoggingHelper.info(Logger, "NODE CONNECTED: " + socket.remoteAddress + ":" + socket.remotePort);
        }).listen(this.port, this.nodeManager.host);
        return new Promise(function (resolve) {
            _this.server.on("listening", function () {
                logging_helper_1.LoggingHelper.info(Logger, "NodeMgr Listening on " + _this.nodeManager.host + ":" + _this.port);
                resolve();
            });
        });
    };
    NodeServer.prototype.stop = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.server.close(function (error) {
                if (error !== undefined) {
                    logging_helper_1.LoggingHelper.error(Logger, "ERROR! NodeManager not stopped: " + error);
                    reject(error);
                }
                else {
                    logging_helper_1.LoggingHelper.info(Logger, "STOPPED");
                    resolve();
                }
            });
        });
    };
    return NodeServer;
}());
//# sourceMappingURL=node-manager.js.map