"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BespokeServer = void 0;
var node_manager_1 = require("./node-manager");
var webhook_manager_1 = require("./webhook-manager");
var http_helper_1 = require("../core/http-helper");
var global_1 = require("../core/global");
var logging_helper_1 = require("../core/logging-helper");
var bst_statistics_1 = require("../statistics/bst-statistics");
var Logger = "BSPKD";
var BespokeServer = (function () {
    function BespokeServer(webhookPort, nodePorts) {
        this.webhookPort = webhookPort;
        this.nodePorts = nodePorts;
    }
    BespokeServer.prototype.start = function () {
        return __awaiter(this, void 0, void 0, function () {
            var self;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        bst_statistics_1.BstStatistics.instance().start();
                        self = this;
                        console.error("AWS_KEY: " + process.env["AWS_ACCESS_KEY_ID"]);
                        this.nodeManager = new node_manager_1.NodeManager(this.nodePorts);
                        return [4, this.nodeManager.start()];
                    case 1:
                        _a.sent();
                        this.webhookManager = new webhook_manager_1.WebhookManager(this.webhookPort);
                        return [4, this.webhookManager.start()];
                    case 2:
                        _a.sent();
                        this.webhookManager.onWebhookReceived = function (webhookRequest) {
                            if (webhookRequest.isPing()) {
                                http_helper_1.HTTPHelper.respond(webhookRequest.sourceSocket, 200, "bst-server-" + global_1.Global.version());
                            }
                            else {
                                try {
                                    webhookRequest.nodeID();
                                }
                                catch (error) {
                                    http_helper_1.HTTPHelper.respond(webhookRequest.sourceSocket, 400, error.message);
                                    bst_statistics_1.BstStatistics.instance().record(bst_statistics_1.BstCommand.proxy, bst_statistics_1.BstEvent.dropped);
                                    return;
                                }
                                if (webhookRequest.nodeID() === null) {
                                    logging_helper_1.LoggingHelper.error(Logger, "No node specified: " + webhookRequest.uri);
                                    http_helper_1.HTTPHelper.respond(webhookRequest.sourceSocket, 400, "No node specified. Must be included with the querystring as node-id.");
                                }
                                else {
                                    var node = self.nodeManager.node(webhookRequest.nodeID());
                                    if (node == null) {
                                        logging_helper_1.LoggingHelper.error(Logger, "Node is not active: " + webhookRequest.nodeID());
                                        http_helper_1.HTTPHelper.respond(webhookRequest.sourceSocket, 404, "Node is not active: " + webhookRequest.nodeID());
                                        bst_statistics_1.BstStatistics.instance().record(bst_statistics_1.BstCommand.proxy, bst_statistics_1.BstEvent.dropped, webhookRequest.nodeID());
                                    }
                                    else {
                                        logging_helper_1.LoggingHelper.info(Logger, "Forwarded: " + webhookRequest.nodeID());
                                        node.forward(webhookRequest);
                                        bst_statistics_1.BstStatistics.instance().record(bst_statistics_1.BstCommand.proxy, bst_statistics_1.BstEvent.forwarded, node.id);
                                    }
                                }
                            }
                        };
                        this.uncaughtExceptionHandler = function (error) {
                            console.error("UncaughtException: " + error.stack);
                        };
                        process.on("uncaughtException", this.uncaughtExceptionHandler);
                        process.on("unhandledRejection", this.uncaughtExceptionHandler);
                        return [2];
                }
            });
        });
    };
    BespokeServer.prototype.stop = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        bst_statistics_1.BstStatistics.instance().stop();
                        logging_helper_1.LoggingHelper.info(Logger, "BespokenServer STOP");
                        process.removeListener("uncaughtException", this.uncaughtExceptionHandler);
                        process.removeListener("unhandledRejection", this.uncaughtExceptionHandler);
                        return [4, this.nodeManager.stop()];
                    case 1:
                        _a.sent();
                        return [4, this.webhookManager.stop()];
                    case 2:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    return BespokeServer;
}());
exports.BespokeServer = BespokeServer;
//# sourceMappingURL=bespoke-server.js.map