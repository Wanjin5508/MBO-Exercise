"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpokesClient = void 0;
var request_promise_native_1 = require("request-promise-native");
var logging_helper_1 = require("../core/logging-helper");
var HttpsProxyAgent = require("https-proxy-agent");
var Logger = "SPOKES-CLIENT";
var SpokesClient = (function () {
    function SpokesClient(id, secretKey) {
        this.id = id;
        this.secretKey = secretKey;
        this._secretKey = secretKey;
        this._id = id;
    }
    SpokesClient.prototype.verifyUUIDisNew = function () {
        return __awaiter(this, void 0, void 0, function () {
            var options, proxy, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = {
                            uri: "https://api.bespoken.link/pipe/".concat(this._secretKey),
                            headers: {
                                "x-access-token": "4772616365-46696f72656c6c61",
                            },
                            body: {},
                            json: true,
                            timeout: 30000
                        };
                        proxy = process.env.HTTPS_PROXY;
                        if (proxy) {
                            options.agent = new HttpsProxyAgent(proxy);
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4, (0, request_promise_native_1.get)(options)];
                    case 2:
                        _a.sent();
                        return [3, 4];
                    case 3:
                        error_1 = _a.sent();
                        if (error_1.statusCode && error_1.statusCode !== 404) {
                            logging_helper_1.LoggingHelper.error(Logger, "Error while verifying id: ".concat(error_1.message));
                            throw error_1;
                        }
                        return [2, true];
                    case 4: return [2, false];
                }
            });
        });
    };
    SpokesClient.prototype.createPipe = function () {
        return __awaiter(this, void 0, void 0, function () {
            var options, proxy, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = {
                            uri: "https://api.bespoken.link/pipe",
                            headers: {
                                "x-access-token": "4772616365-46696f72656c6c61",
                            },
                            body: {
                                uuid: this._secretKey,
                                diagnosticsKey: null,
                                endPoint: {
                                    name: this._id,
                                },
                                http: {
                                    url: "https://proxy.bespoken.tools",
                                },
                                path: "/",
                                pipeType: "HTTP",
                                proxy: true,
                            },
                            json: true,
                            timeout: 30000
                        };
                        proxy = process.env.HTTPS_PROXY;
                        if (proxy) {
                            options.agent = new HttpsProxyAgent(proxy);
                        }
                        return [4, (0, request_promise_native_1.post)(options)];
                    case 1:
                        response = _a.sent();
                        response.endPoint = {
                            name: this._id,
                        };
                        return [2, response];
                }
            });
        });
    };
    return SpokesClient;
}());
exports.SpokesClient = SpokesClient;
//# sourceMappingURL=spokes.js.map