"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhookManager = void 0;
var webhook_request_1 = require("../core/webhook-request");
var http = require("http");
var https = require("https");
var logging_helper_1 = require("../core/logging-helper");
var Logger = "WEBHOOK";
var WebhookManager = (function () {
    function WebhookManager(port) {
        this.port = port;
        this.socketMap = {};
        this.onWebhookReceived = null;
        this.host = "0.0.0.0";
    }
    WebhookManager.prototype.start = function () {
        var _this = this;
        var socketIndex = 0;
        var connectFunction = function (socket) {
            var webhookRequest = new webhook_request_1.WebhookRequest(socket);
            socketIndex++;
            var socketKey = socketIndex;
            _this.socketMap[socketIndex] = socket;
            socket.on("data", function (data) {
                webhookRequest.append(data);
                if (webhookRequest.done()) {
                    _this.onWebhookReceived(webhookRequest);
                    webhookRequest = new webhook_request_1.WebhookRequest(socket);
                }
            });
            socket.on("close", function () {
                delete _this.socketMap[socketKey];
            });
        };
        if (!process.env.SSL_CERT) {
            this.server = http.createServer().listen(this.port);
            this.server.on("connection", connectFunction);
        }
        else {
            var cert = process.env.SSL_CERT;
            var key = process.env.SSL_KEY;
            var credentials = {
                cert: cert.replace(/\\n/g, "\n"),
                key: key.replace(/\\n/g, "\n"),
            };
            var httpsServer = https.createServer(credentials);
            this.server = httpsServer.listen(this.port, this.host);
            this.server.on("secureConnection", connectFunction);
        }
        return new Promise(function (resolve, reject) {
            _this.server.on("listening", function () {
                logging_helper_1.LoggingHelper.info(Logger, "Webhook Listening on " + _this.host + ":" + _this.port);
                resolve();
            });
        });
    };
    WebhookManager.prototype.stop = function () {
        var _this = this;
        var self = this;
        for (var key in self.socketMap) {
            var socket = self.socketMap[key];
            socket.end();
        }
        return new Promise(function (resolve, reject) {
            _this.server.close(function () {
                resolve();
            });
        });
    };
    return WebhookManager;
}());
exports.WebhookManager = WebhookManager;
//# sourceMappingURL=webhook-manager.js.map