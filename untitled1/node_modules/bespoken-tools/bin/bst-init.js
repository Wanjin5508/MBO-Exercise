"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var commander_1 = require("commander");
var inquirer_1 = require("inquirer");
var global_1 = require("../lib/core/global");
var init_util_1 = require("../lib/init/init-util");
var chalk = require("chalk");
commander_1.program.version(global_1.Global.version());
var questions = [
    {
        type: "list",
        name: "type",
        message: "What type of tests are you creating - unit, end-to-end:",
        choices: [
            {
                name: "unit",
                value: "unit",
            },
            {
                name: "end-to-end",
                value: "e2e",
            },
        ],
    },
    {
        type: "input",
        name: "projectName",
        message: "Enter the name of your voice experience:",
        default: "voice hello world"
    },
    {
        type: "list",
        name: "platform",
        message: "Select the platform you are developing for",
        choices: function (answers) {
            var platforms = [
                {
                    name: "Alexa",
                    value: "alexa",
                },
                {
                    name: "Google",
                    value: "google",
                }
            ];
            if (answers["type"] === "unit") {
                return platforms;
            }
            else {
                return platforms.concat([
                    {
                        name: "Phone",
                        value: "phone",
                    },
                    {
                        name: "Sms",
                        value: "sms",
                    },
                    {
                        name: "Whatsapp",
                        value: "whatsapp",
                    },
                ]);
            }
        }
    },
    {
        type: "input",
        name: "phoneNumber",
        message: "Please provide a valid phone number in the E.164 format to call to (e.g.: +14155552671):",
        when: function (answers) { return ["phone", "sms", "whatsapp"].indexOf(answers["platform"]) > -1; },
        validate: function (input) {
            if (!input)
                return false;
            return /^\+?[1-9]\d{1,14}$/.test(input);
        },
    },
    {
        type: "input",
        name: "handler",
        message: "Please provide the name of your handler file (or leave blank for index.js):",
        default: "index.js",
        when: function (answers) { return answers["type"].includes("unit"); },
    },
    {
        type: "input",
        name: "locales",
        message: "Enter the locale for your tests.\nIf you are targeting multiple locales, please separate them by a comma:",
        default: "en-US",
    },
    {
        type: "input",
        name: "virtualDevice",
        message: "For end-to-end tests, we require a virtual device token.\nIf you don't have one or are not sure just leave it blank.\nYou can create virtual devices here: https://apps.bespoken.io/dashboard/virtualdevice\nEnter your token:",
        when: function (answers) { return answers["type"].includes("e2e"); },
    },
    {
        type: "input",
        name: "dialogFlow",
        message: "Please provide the path to your Dialogflow directory\n(if you don't know what this is, please take a look at https://read.bespoken.io/unit-testing/guide-google/#configuration-google-specific):",
        when: function (answers) { return answers["type"].includes("unit") && answers["platform"].includes("google"); },
    },
    {
        type: "list",
        name: "testingExist",
        message: "There is already a testing.json file in your location would you like to overwrite it?",
        choices: [
            {
                name: "Yes",
                value: true,
            },
            {
                name: "No",
                value: false,
            },
        ],
        when: function () { return init_util_1.InitUtil.isThereTestingJsonFile(); },
    }
];
commander_1.program
    .description("Setup example project and configuration")
    .action(function () {
    console.log(chalk.yellow("Welcome to the Bespoken CLI."));
    console.log(chalk.yellow("We'll set up all you need for you to start testing your voice experiences."));
    console.log(chalk.yellow("Please tell us:"));
    (0, inquirer_1.prompt)(questions).then(function (answers) { return __awaiter(void 0, void 0, void 0, function () {
        var type, platform, handler, locales, projectName, virtualDevice, dialogFlow, testingExist, phoneNumber, initUtil, commandToExectute;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    type = answers.type, platform = answers.platform, handler = answers.handler, locales = answers.locales, projectName = answers.projectName, virtualDevice = answers.virtualDevice, dialogFlow = answers.dialogFlow, testingExist = answers.testingExist, phoneNumber = answers.phoneNumber;
                    initUtil = new init_util_1.InitUtil(type, platform, handler, locales, projectName, virtualDevice, dialogFlow, testingExist, phoneNumber);
                    return [4, initUtil.createFiles()];
                case 1:
                    _a.sent();
                    commandToExectute = "bst test";
                    if (typeof testingExist !== "undefined" && !testingExist) {
                        commandToExectute = "bst test --config ".concat(initUtil.lastTestingJSONFilename);
                    }
                    console.log(chalk.green("\nThat's it! We've created your voice app test files and you can find them under the \"test\" folder. To run them, simply type:\n".concat(commandToExectute, "\nLearn more about testing for voice at https://read.bespoken.io")));
                    return [2];
            }
        });
    }); });
});
commander_1.program.parse(process.argv);
//# sourceMappingURL=bst-init.js.map