#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var commander_1 = require("commander");
var global_1 = require("../lib/core/global");
var bst_statistics_1 = require("../lib/statistics/bst-statistics");
var skillTesting = require("skill-testing-ml");
var skippedOptions = [
    "jest.collectCoverageFrom",
    "jest.moduleFileExtensions",
    "jest.testPathIgnorePatterns",
    "jest.testMatch"
];
commander_1.program.version(global_1.Global.version());
global_1.Global.initializeCLI(false).then(function () {
    commander_1.program
        .argument("[testPattern]")
        .description("Runs unit or end-to-end tests for a skill - automatically searches for YML test files and runs them")
        .action(function (testPattern) {
        var skillTesterArgs = process.argv.slice(0, 2);
        if (testPattern) {
            skillTesterArgs.push(testPattern);
        }
        var isRunningOnGithubAction = process.env.CI === "true" && process.env.GITHUB_ACTIONS === "true";
        var client = isRunningOnGithubAction ? "monitoring" : "CLI";
        var configurationOverrides = { client: client };
        var programOptions = commander_1.program.opts();
        skillTesting.ConfigurationKeys.forEach(function (element) {
            if (programOptions[element.key]) {
                configurationOverrides[element.key] = programOptions[element.key];
            }
        });
        var testCLI = new skillTesting.CLI();
        testCLI.run(skillTesterArgs, configurationOverrides).then(function (success) {
            var nodeId = undefined;
            if (global_1.Global.config() && global_1.Global.config().secretKey && global_1.Global.config().secretKey()) {
                nodeId = global_1.Global.config().secretKey();
            }
            bst_statistics_1.BstStatistics.instance().record(bst_statistics_1.BstCommand.test, undefined, nodeId, global_1.Global.version());
            process.exitCode = success ? 0 : 1;
        });
    });
    var optionsFiltered = skillTesting.ConfigurationKeys.filter(function (item) { return skippedOptions.indexOf(item.key) === -1; });
    var regultarOptions = [];
    var jestOptions = [];
    for (var i = 0; i < optionsFiltered.length; i++) {
        if (optionsFiltered[i].key.startsWith("jest")) {
            jestOptions.push(optionsFiltered[i]);
        }
        else {
            regultarOptions.push(optionsFiltered[i]);
        }
    }
    var sortByKey = function (itemA, itemB) {
        if (itemA.key < itemB.key)
            return -1;
        if (itemA.key > itemB.key)
            return 1;
        return 0;
    };
    regultarOptions = regultarOptions.sort(sortByKey);
    jestOptions = jestOptions.sort(sortByKey);
    var options = regultarOptions.concat(jestOptions);
    options.forEach(function (element) {
        commander_1.program.option("--".concat(element.key, " <").concat(element.key, ">"), element.text);
    });
    commander_1.program.parse(process.argv);
});
//# sourceMappingURL=bst-test.js.map